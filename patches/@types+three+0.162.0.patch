diff --git a/node_modules/@types/three/examples/jsm/nodes/Nodes.d.ts b/node_modules/@types/three/examples/jsm/nodes/Nodes.d.ts
index 0cd6f27..cbad9e5 100644
--- a/node_modules/@types/three/examples/jsm/nodes/Nodes.d.ts
+++ b/node_modules/@types/three/examples/jsm/nodes/Nodes.d.ts
@@ -223,6 +223,7 @@ export {
     materialColor,
     materialEmissive,
     materialMetalness,
+    materialNormal,
     MaterialNodeScope,
     materialOpacity,
     materialReflectivity,
diff --git a/node_modules/@types/three/examples/jsm/nodes/accessors/MaterialNode.d.ts b/node_modules/@types/three/examples/jsm/nodes/accessors/MaterialNode.d.ts
index ef17737..0c16fe3 100644
--- a/node_modules/@types/three/examples/jsm/nodes/accessors/MaterialNode.d.ts
+++ b/node_modules/@types/three/examples/jsm/nodes/accessors/MaterialNode.d.ts
@@ -32,4 +32,5 @@ export const materialSpecularColor: ShaderNodeObject<MaterialNode>;
 export const materialReflectivity: ShaderNodeObject<MaterialNode>;
 export const materialRoughness: ShaderNodeObject<MaterialNode>;
 export const materialMetalness: ShaderNodeObject<MaterialNode>;
+export const materialNormal: ShaderNodeObject<MaterialNode>;
 export const materialRotation: ShaderNodeObject<MaterialNode>;
diff --git a/node_modules/@types/three/examples/jsm/nodes/shadernode/ShaderNode.d.ts b/node_modules/@types/three/examples/jsm/nodes/shadernode/ShaderNode.d.ts
index 812d23f..e250a7a 100644
--- a/node_modules/@types/three/examples/jsm/nodes/shadernode/ShaderNode.d.ts
+++ b/node_modules/@types/three/examples/jsm/nodes/shadernode/ShaderNode.d.ts
@@ -40,6 +40,13 @@ export interface NodeElements {
 
     element: typeof element;
     convert: typeof convert;
+
+    // TODO: temp
+    addAssign: (
+        nodeA: NodeRepresentation,
+        nodeB: NodeRepresentation,
+        ...others: NodeRepresentation[]
+    ) => ShaderNodeObject<Node>;
 }
 
 export function addNodeElement(name: string, nodeElement: unknown): void;
@@ -53,8 +60,8 @@ export type Swizzable<T extends Node = Node> =
 export type ShaderNodeObject<T extends Node> =
     & T
     & {
-        [Key in keyof NodeElements]: NodeElements[Key] extends (node: T, ...args: infer Args) => infer R
-            ? (...args: Args) => R
+        [Key in keyof NodeElements]: T extends { [K in Key]: infer M } ? M
+            : NodeElements[Key] extends (node: T, ...args: infer Args) => infer R ? (...args: Args) => R
             : never;
     }
     & Swizzable<T>;
