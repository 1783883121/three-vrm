diff --git a/node_modules/@types/three/examples/jsm/nodes/Nodes.d.ts b/node_modules/@types/three/examples/jsm/nodes/Nodes.d.ts
index b24c996..96937d6 100644
--- a/node_modules/@types/three/examples/jsm/nodes/Nodes.d.ts
+++ b/node_modules/@types/three/examples/jsm/nodes/Nodes.d.ts
@@ -8,9 +8,10 @@ export { default as BypassNode, bypass } from './core/BypassNode.js';
 export { default as CacheNode, cache } from './core/CacheNode.js';
 export { default as ConstNode } from './core/ConstNode.js';
 export { default as ContextNode, context } from './core/ContextNode.js';
+export { default as LightingModel } from './core/LightingModel.js';
 export { default as Node } from './core/Node.js';
 export { default as NodeAttribute } from './core/NodeAttribute.js';
-export { default as NodeBuilder } from './core/NodeBuilder.js';
+export { default as NodeBuilder, NodeBuilderContext } from './core/NodeBuilder.js';
 export { default as NodeCache } from './core/NodeCache.js';
 export { default as NodeCode } from './core/NodeCode.js';
 export { default as NodeFrame } from './core/NodeFrame.js';
@@ -188,10 +189,26 @@ export {
     materialEmissive,
     materialOpacity,
     materialSpecularColor,
+    materialSpecularStrength,
     materialReflectivity,
     materialRoughness,
     materialMetalness,
+    materialNormal,
+    materialClearcoat,
+    materialClearcoatRoughness,
+    materialClearcoatNormal,
     materialRotation,
+    materialSheen,
+    materialSheenRoughness,
+    materialIridescence,
+    materialIridescenceIOR,
+    materialIridescenceThickness,
+    materialLineScale,
+    materialLineDashSize,
+    materialLineGapSize,
+    materialLineWidth,
+    materialLineDashOffset,
+    materialPointWidth,
     MaterialNodeScope,
 } from './accessors/MaterialNode.js';
 export { default as MaterialReferenceNode, materialReference } from './accessors/MaterialReferenceNode.js';
diff --git a/node_modules/@types/three/examples/jsm/nodes/accessors/MaterialNode.d.ts b/node_modules/@types/three/examples/jsm/nodes/accessors/MaterialNode.d.ts
index 82a47c7..185d705 100644
--- a/node_modules/@types/three/examples/jsm/nodes/accessors/MaterialNode.d.ts
+++ b/node_modules/@types/three/examples/jsm/nodes/accessors/MaterialNode.d.ts
@@ -29,7 +29,23 @@ export const materialShininess: ShaderNodeObject<MaterialNode>;
 export const materialEmissive: ShaderNodeObject<MaterialNode>;
 export const materialOpacity: ShaderNodeObject<MaterialNode>;
 export const materialSpecularColor: ShaderNodeObject<MaterialNode>;
+export const materialSpecularStrength: ShaderNodeObject<MaterialNode>;
 export const materialReflectivity: ShaderNodeObject<MaterialNode>;
 export const materialRoughness: ShaderNodeObject<MaterialNode>;
 export const materialMetalness: ShaderNodeObject<MaterialNode>;
+export const materialNormal: ShaderNodeObject<MaterialNode>;
+export const materialClearcoat: ShaderNodeObject<MaterialNode>;
+export const materialClearcoatRoughness: ShaderNodeObject<MaterialNode>;
+export const materialClearcoatNormal: ShaderNodeObject<MaterialNode>;
 export const materialRotation: ShaderNodeObject<MaterialNode>;
+export const materialSheen: ShaderNodeObject<MaterialNode>;
+export const materialSheenRoughness: ShaderNodeObject<MaterialNode>;
+export const materialIridescence: ShaderNodeObject<MaterialNode>;
+export const materialIridescenceIOR: ShaderNodeObject<MaterialNode>;
+export const materialIridescenceThickness: ShaderNodeObject<MaterialNode>;
+export const materialLineScale: ShaderNodeObject<MaterialNode>;
+export const materialLineDashSize: ShaderNodeObject<MaterialNode>;
+export const materialLineGapSize: ShaderNodeObject<MaterialNode>;
+export const materialLineWidth: ShaderNodeObject<MaterialNode>;
+export const materialLineDashOffset: ShaderNodeObject<MaterialNode>;
+export const materialPointWidth: ShaderNodeObject<MaterialNode>;
diff --git a/node_modules/@types/three/examples/jsm/nodes/accessors/MaterialReferenceNode.d.ts b/node_modules/@types/three/examples/jsm/nodes/accessors/MaterialReferenceNode.d.ts
index c6938c3..5aeb243 100644
--- a/node_modules/@types/three/examples/jsm/nodes/accessors/MaterialReferenceNode.d.ts
+++ b/node_modules/@types/three/examples/jsm/nodes/accessors/MaterialReferenceNode.d.ts
@@ -9,5 +9,5 @@ export default class MaterialReferenceNode extends ReferenceNode<Material | null
 export const materialReference: (
     name: string,
     nodeOrType: NodeOrType,
-    material: Material,
+    material?: Material,
 ) => ShaderNodeObject<MaterialReferenceNode>;
diff --git a/node_modules/@types/three/examples/jsm/nodes/core/ContextNode.d.ts b/node_modules/@types/three/examples/jsm/nodes/core/ContextNode.d.ts
index fd1435b..1e0a010 100644
--- a/node_modules/@types/three/examples/jsm/nodes/core/ContextNode.d.ts
+++ b/node_modules/@types/three/examples/jsm/nodes/core/ContextNode.d.ts
@@ -11,3 +11,9 @@ export default class ContextNode extends Node {
 }
 
 export const context: (node: NodeRepresentation, context: NodeBuilderContext) => ShaderNodeObject<ContextNode>;
+
+declare module '../shadernode/ShaderNode.js' {
+    interface NodeElements {
+        context: typeof context;
+    }
+}
diff --git a/node_modules/@types/three/examples/jsm/nodes/core/LightingModel.d.ts b/node_modules/@types/three/examples/jsm/nodes/core/LightingModel.d.ts
new file mode 100644
index 0000000..5f2b054
--- /dev/null
+++ b/node_modules/@types/three/examples/jsm/nodes/core/LightingModel.d.ts
@@ -0,0 +1,12 @@
+import { default as NodeBuilder, NodeBuilderContext } from './NodeBuilder.js';
+import StackNode from '../core/StackNode.js';
+
+export default class LightingModel {
+  constructor();
+  start(input: NodeBuilderContext, stack: StackNode, builder: NodeBuilder): void;
+  finish(input: NodeBuilderContext, stack: StackNode, builder: NodeBuilder): void;
+  direct(input: NodeBuilderContext, stack: StackNode, builder: NodeBuilder): void;
+  indirectDiffuse(input: NodeBuilderContext, stack: StackNode, builder: NodeBuilder): void;
+  indirectSpecular(input: NodeBuilderContext, stack: StackNode, builder: NodeBuilder): void;
+  ambientOcclusion(input: NodeBuilderContext, stack: StackNode, builder: NodeBuilder): void;
+}
diff --git a/node_modules/@types/three/examples/jsm/nodes/core/NodeBuilder.d.ts b/node_modules/@types/three/examples/jsm/nodes/core/NodeBuilder.d.ts
index effd95f..dc4e12b 100644
--- a/node_modules/@types/three/examples/jsm/nodes/core/NodeBuilder.d.ts
+++ b/node_modules/@types/three/examples/jsm/nodes/core/NodeBuilder.d.ts
@@ -17,6 +17,7 @@ import NodeParser from './NodeParser.js';
 import NodeUniform from './NodeUniform.js';
 import NodeVar from './NodeVar.js';
 import NodeVarying from './NodeVarying.js';
+import StackNode from './StackNode.js';
 
 export type BuildStageOption = 'construct' | 'analyze' | 'generate';
 
@@ -60,7 +61,7 @@ export default abstract class NodeBuilder {
 
     shaderStage: NodeShaderStageOption | null;
     buildStage: BuildStageOption | null;
-    stack: Node[];
+    stack: StackNode;
 
     setHashNode(node: Node, hash: string): void;
     addNode(node: Node): void;
diff --git a/node_modules/@types/three/examples/jsm/nodes/core/VarNode.d.ts b/node_modules/@types/three/examples/jsm/nodes/core/VarNode.d.ts
index 95b6ecb..22bbb32 100644
--- a/node_modules/@types/three/examples/jsm/nodes/core/VarNode.d.ts
+++ b/node_modules/@types/three/examples/jsm/nodes/core/VarNode.d.ts
@@ -18,3 +18,10 @@ export default class VarNode extends Node {
 
 export const label: (node: NodeRepresentation, name?: string) => ShaderNodeObject<VarNode>;
 export const temp: (node: NodeRepresentation, name?: string) => ShaderNodeObject<VarNode>;
+
+declare module '../shadernode/ShaderNode.js' {
+    interface NodeElements {
+        label: typeof label;
+        temp: typeof temp;
+    }
+}
diff --git a/node_modules/@types/three/examples/jsm/nodes/display/NormalMapNode.d.ts b/node_modules/@types/three/examples/jsm/nodes/display/NormalMapNode.d.ts
index 115389b..aec0a99 100644
--- a/node_modules/@types/three/examples/jsm/nodes/display/NormalMapNode.d.ts
+++ b/node_modules/@types/three/examples/jsm/nodes/display/NormalMapNode.d.ts
@@ -16,3 +16,9 @@ export default class NormalMapNode extends TempNode {
 export const normalMap: (node: Node, scaleNode?: Node) => ShaderNodeObject<NormalMapNode>;
 
 export const TBNViewMatrix: ShaderNodeObject<MathNode>;
+
+declare module '../shadernode/ShaderNode.js' {
+    interface NodeElements {
+        normalMap: typeof normalMap;
+    }
+}
diff --git a/node_modules/@types/three/examples/jsm/nodes/functions/BSDF/BRDF_Lambert.d.ts b/node_modules/@types/three/examples/jsm/nodes/functions/BSDF/BRDF_Lambert.d.ts
index 4ccbcdb..0461317 100644
--- a/node_modules/@types/three/examples/jsm/nodes/functions/BSDF/BRDF_Lambert.d.ts
+++ b/node_modules/@types/three/examples/jsm/nodes/functions/BSDF/BRDF_Lambert.d.ts
@@ -1,6 +1,7 @@
-import { ShaderNode } from '../../shadernode/ShaderNode.js';
+import { ShaderNodeObject } from '../../shadernode/ShaderNode.js';
 import Node from '../../core/Node.js';
+import OperatorNode from '../../math/OperatorNode.js';
 
-declare const BRDF_Lambert: ShaderNode<{ diffuseColor: Node }>;
+declare const BRDF_Lambert: (args: { diffuseColor: Node }) => ShaderNodeObject<OperatorNode>;
 
 export default BRDF_Lambert;
diff --git a/node_modules/@types/three/examples/jsm/nodes/materials/LineBasicNodeMaterial.d.ts b/node_modules/@types/three/examples/jsm/nodes/materials/LineBasicNodeMaterial.d.ts
index f00e957..f161cfb 100644
--- a/node_modules/@types/three/examples/jsm/nodes/materials/LineBasicNodeMaterial.d.ts
+++ b/node_modules/@types/three/examples/jsm/nodes/materials/LineBasicNodeMaterial.d.ts
@@ -7,3 +7,9 @@ export default class LineBasicNodeMaterial extends NodeMaterial {
     constructor(parameters?: ShaderMaterialParameters);
     copy(source: LineBasicNodeMaterial): this;
 }
+
+declare module './NodeMaterial.js' {
+    export interface NodeMaterials {
+        LineBasicNodeMaterial: LineBasicNodeMaterial;
+    }
+}
diff --git a/node_modules/@types/three/examples/jsm/nodes/materials/MeshBasicNodeMaterial.d.ts b/node_modules/@types/three/examples/jsm/nodes/materials/MeshBasicNodeMaterial.d.ts
index 2c94f72..657112b 100644
--- a/node_modules/@types/three/examples/jsm/nodes/materials/MeshBasicNodeMaterial.d.ts
+++ b/node_modules/@types/three/examples/jsm/nodes/materials/MeshBasicNodeMaterial.d.ts
@@ -8,3 +8,9 @@ export default class MeshBasicNodeMaterial extends NodeMaterial {
     constructor(paramters?: ShaderMaterialParameters);
     copy(source: MeshBasicNodeMaterial): this;
 }
+
+declare module './NodeMaterial.js' {
+    export interface NodeMaterials {
+        MeshBasicNodeMaterial: MeshBasicNodeMaterial;
+    }
+}
diff --git a/node_modules/@types/three/examples/jsm/nodes/materials/MeshPhysicalNodeMaterial.d.ts b/node_modules/@types/three/examples/jsm/nodes/materials/MeshPhysicalNodeMaterial.d.ts
index 62ba34f..86d998a 100644
--- a/node_modules/@types/three/examples/jsm/nodes/materials/MeshPhysicalNodeMaterial.d.ts
+++ b/node_modules/@types/three/examples/jsm/nodes/materials/MeshPhysicalNodeMaterial.d.ts
@@ -33,3 +33,9 @@ export default class MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {
 
     copy(source: MeshPhysicalNodeMaterial): this;
 }
+
+declare module './NodeMaterial.js' {
+    export interface NodeMaterials {
+        MeshPhysicalNodeMaterial: MeshPhysicalNodeMaterial;
+    }
+}
diff --git a/node_modules/@types/three/examples/jsm/nodes/materials/MeshStandardNodeMaterial.d.ts b/node_modules/@types/three/examples/jsm/nodes/materials/MeshStandardNodeMaterial.d.ts
index 353d957..1570c22 100644
--- a/node_modules/@types/three/examples/jsm/nodes/materials/MeshStandardNodeMaterial.d.ts
+++ b/node_modules/@types/three/examples/jsm/nodes/materials/MeshStandardNodeMaterial.d.ts
@@ -13,3 +13,9 @@ export default class MeshStandardNodeMaterial extends NodeMaterial {
     constructor(paramters?: ShaderMaterialParameters);
     copy(source: MeshStandardNodeMaterial): this;
 }
+
+declare module './NodeMaterial.js' {
+    export interface NodeMaterials {
+        MeshStandardNodeMaterial: MeshStandardNodeMaterial;
+    }
+}
diff --git a/node_modules/@types/three/examples/jsm/nodes/materials/NodeMaterial.d.ts b/node_modules/@types/three/examples/jsm/nodes/materials/NodeMaterial.d.ts
index 90cf40b..a2504ec 100644
--- a/node_modules/@types/three/examples/jsm/nodes/materials/NodeMaterial.d.ts
+++ b/node_modules/@types/three/examples/jsm/nodes/materials/NodeMaterial.d.ts
@@ -10,12 +10,14 @@ import {
 } from '../../../../src/Three.js';
 import NodeBuilder from '../core/NodeBuilder.js';
 import Node from '../core/Node.js';
-import { LightingModelNode } from '../lighting/LightingContextNode.js';
+import LightsNode from '../lighting/LightsNode.js';
 import LineBasicNodeMaterial from './LineBasicNodeMaterial.js';
 import MeshBasicNodeMaterial from './MeshBasicNodeMaterial.js';
 import MeshPhysicalNodeMaterial from './MeshPhysicalNodeMaterial.js';
 import MeshStandardNodeMaterial from './MeshStandardNodeMaterial.js';
+import ModelViewProjectionNode from '../accessors/ModelViewProjectionNode.js';
 import PointsNodeMaterial from './PointsNodeMaterial.js';
+import { ShaderNodeObject } from '../shadernode/ShaderNode.js';
 import SpriteNodeMaterial from './SpriteNodeMaterial.js';
 
 export default class NodeMaterial extends ShaderMaterial {
@@ -23,32 +25,47 @@ export default class NodeMaterial extends ShaderMaterial {
 
     type: string;
 
+    forceSinglePass: false;
+
+    fog: true;
     lights: true;
     normals: true;
 
-    lightsNode: Node | null;
-    envNode: Node | null;
+    lightsNode: ShaderNodeObject<Node> | null;
+    envNode: ShaderNodeObject<Node> | null;
+
+    colorNode: ShaderNodeObject<Node> | null;
+    normalNode: ShaderNodeObject<Node> | null;
+    opacityNode: ShaderNodeObject<Node> | null;
+    backdropNode: ShaderNodeObject<Node> | null;
+    backdropAlphaNode: ShaderNodeObject<Node> | null;
+    alphaTestNode: ShaderNodeObject<Node> | null;
+
+    positionNode: ShaderNodeObject<Node> | null;
 
-    colorNode: Node | null;
-    normalNode: Node | null;
-    opacityNode: Node | null;
-    backdropNode: Node | null;
-    backdropAlphaNode: Node | null;
-    alphaTestNode: Node | null;
+    depthNode: ShaderNodeObject<Node> | null;
 
-    positionNode: Node | null;
+    outputNode: ShaderNodeObject<Node> | null;
+
+    fragmentNode: ShaderNodeObject<Node> | null;
+    vertexNode: ShaderNodeObject<Node> | null;
 
     constructor();
 
-    build(builder: NodeBuilder): void;
     customProgramCacheKey(): string;
-    generatePosition(builder: NodeBuilder): void;
-    generateDiffuseColor(builder: NodeBuilder): void;
-    generateLight(
-        builder: NodeBuilder,
-        lights: { diffuseColorNode: Node; lightingModelNode: LightingModelNode; lightsNode?: Node },
-    ): void;
-    generateOutput(builder: NodeBuilder, lights: { diffuseColorNode: Node; outgoingLightNode: Node }): void;
+    build(builder: NodeBuilder): void;
+    setup(builder: NodeBuilder): void;
+    setupDepth(builder: NodeBuilder): void;
+    setupPosition(builder: NodeBuilder): ModelViewProjectionNode;
+    setupDiffuseColor(builder: NodeBuilder): void;
+    setupVariants(builder: NodeBuilder): void;
+    setupNormal(builder: NodeBuilder): void;
+    getEnvNode(builder: NodeBuilder): Node | null;
+    setupLights(builder: NodeBuilder): LightsNode;
+    setupLightingModel(builder: NodeBuilder): void;
+    setupLighting(builder: NodeBuilder): Node;
+    setupOutput(builder: NodeBuilder): Node;
+    setupDefaultValues(material: Material): void;
 
     static fromMaterial(material: LineBasicMaterial): LineBasicNodeMaterial;
     static fromMaterial(material: MeshBasicMaterial): MeshBasicNodeMaterial;
@@ -59,3 +76,12 @@ export default class NodeMaterial extends ShaderMaterial {
     static fromMaterial(material: NodeMaterial): NodeMaterial;
     static fromMaterial(material: Material): NodeMaterial;
 }
+
+export function addNodeMaterial(type: string, material: NodeMaterial): void;
+
+export function createNodeMaterialFromType<K extends keyof NodeMaterials>(type: K): NodeMaterials[K];
+export function createNodeMaterialFromType(type: string): NodeMaterial | undefined;
+
+export interface NodeMaterials {
+    NodeMaterial: NodeMaterial;
+}
diff --git a/node_modules/@types/three/examples/jsm/nodes/materials/PointsNodeMaterial.d.ts b/node_modules/@types/three/examples/jsm/nodes/materials/PointsNodeMaterial.d.ts
index 0cf5e57..ad3a337 100644
--- a/node_modules/@types/three/examples/jsm/nodes/materials/PointsNodeMaterial.d.ts
+++ b/node_modules/@types/three/examples/jsm/nodes/materials/PointsNodeMaterial.d.ts
@@ -1,15 +1,21 @@
 import NodeMaterial from './NodeMaterial.js';
 import { ShaderMaterialParameters } from '../../../../src/Three.js';
-import { Node } from '../Nodes.js';
+import { Node, ShaderNodeObject } from '../Nodes.js';
 
 export default class PointsNodeMaterial extends NodeMaterial {
     isPointsNodeMateria: true;
-    colorNode: Node | null;
-    opacityNode: Node | null;
-    alphaTestNode: Node | null;
-    lightNode: Node | null;
-    sizeNode: Node | null;
-    positionNode: Node | null;
+    colorNode: ShaderNodeObject<Node> | null;
+    opacityNode: ShaderNodeObject<Node> | null;
+    alphaTestNode: ShaderNodeObject<Node> | null;
+    lightNode: ShaderNodeObject<Node> | null;
+    sizeNode: ShaderNodeObject<Node> | null;
+    positionNode: ShaderNodeObject<Node> | null;
     constructor(parameters?: ShaderMaterialParameters);
     copy(source: PointsNodeMaterial): this;
 }
+
+declare module './NodeMaterial.js' {
+    export interface NodeMaterials {
+        PointsNodeMaterial: PointsNodeMaterial;
+    }
+}
diff --git a/node_modules/@types/three/examples/jsm/nodes/materials/SpriteNodeMaterial.d.ts b/node_modules/@types/three/examples/jsm/nodes/materials/SpriteNodeMaterial.d.ts
index 95820f7..777ef05 100644
--- a/node_modules/@types/three/examples/jsm/nodes/materials/SpriteNodeMaterial.d.ts
+++ b/node_modules/@types/three/examples/jsm/nodes/materials/SpriteNodeMaterial.d.ts
@@ -1,23 +1,29 @@
 import NodeMaterial from './NodeMaterial.js';
 import { ShaderMaterialParameters } from '../../../../src/Three.js';
-import { NodeBuilder } from '../Nodes.js';
+import { NodeBuilder, ShaderNodeObject } from '../Nodes.js';
 import Node from '../core/Node.js';
 
 export default class SpriteNodeMaterial extends NodeMaterial {
     isSpriteNodeMaterial: true;
 
-    colorNode: Node | null;
-    opacityNode: Node | null;
+    colorNode: ShaderNodeObject<Node> | null;
+    opacityNode: ShaderNodeObject<Node> | null;
 
-    alphaTestNode: Node | null;
+    alphaTestNode: ShaderNodeObject<Node> | null;
 
-    lightNode: Node | null;
+    lightNode: ShaderNodeObject<Node> | null;
 
-    positionNode: Node | null;
-    rotationNode: Node | null;
-    scaleNode: Node | null;
+    positionNode: ShaderNodeObject<Node> | null;
+    rotationNode: ShaderNodeObject<Node> | null;
+    scaleNode: ShaderNodeObject<Node> | null;
 
     constructor(parameters?: ShaderMaterialParameters);
     generatePosition(builder: NodeBuilder): void;
     copy(source: SpriteNodeMaterial): this;
 }
+
+declare module './NodeMaterial.js' {
+    export interface NodeMaterials {
+        SpriteNodeMaterial: SpriteNodeMaterial;
+    }
+}
diff --git a/node_modules/@types/three/examples/jsm/nodes/math/MathNode.d.ts b/node_modules/@types/three/examples/jsm/nodes/math/MathNode.d.ts
index 2d13e47..3842f95 100644
--- a/node_modules/@types/three/examples/jsm/nodes/math/MathNode.d.ts
+++ b/node_modules/@types/three/examples/jsm/nodes/math/MathNode.d.ts
@@ -182,9 +182,15 @@ export type Ternary = (
     c: NodeRepresentation,
 ) => ShaderNodeObject<MathNode>;
 
+export type UnaryOrBinaryOrTernary = (
+    a: NodeRepresentation,
+    b?: NodeRepresentation,
+    c?: NodeRepresentation,
+) => ShaderNodeObject<MathNode>;
+
 export const mix: Ternary;
-export const clamp: Ternary;
-export const saturate: Ternary;
+export const clamp: UnaryOrBinaryOrTernary;
+export const saturate: Unary;
 export const refract: Ternary;
 export const smoothstep: Ternary;
 export const faceForward: Ternary;
diff --git a/node_modules/@types/three/examples/jsm/nodes/shadernode/ShaderNode.d.ts b/node_modules/@types/three/examples/jsm/nodes/shadernode/ShaderNode.d.ts
index f5f1336..a04a801 100644
--- a/node_modules/@types/three/examples/jsm/nodes/shadernode/ShaderNode.d.ts
+++ b/node_modules/@types/three/examples/jsm/nodes/shadernode/ShaderNode.d.ts
@@ -1,10 +1,50 @@
 import Node from '../core/Node.js';
-import { NodeTypeOption, SwizzleOption } from '../core/constants.js';
+import { AnyObject, NodeTypeOption, SwizzleOption } from '../core/constants.js';
 import ConstNode from '../core/ConstNode.js';
 import NodeBuilder from '../core/NodeBuilder.js';
 import SplitNode from '../utils/SplitNode.js';
 
-export interface NodeElements {}
+export interface NodeElements {
+    append: typeof append;
+
+    color: typeof color;
+    float: typeof float;
+    int: typeof int;
+    uint: typeof uint;
+    bool: typeof bool;
+    vec2: typeof vec2;
+    ivec2: typeof ivec2;
+    uvec2: typeof uvec2;
+    bvec2: typeof bvec2;
+    vec3: typeof vec3;
+    ivec3: typeof ivec3;
+    uvec3: typeof uvec3;
+    bvec3: typeof bvec3;
+    vec4: typeof vec4;
+    ivec4: typeof ivec4;
+    uvec4: typeof uvec4;
+    bvec4: typeof bvec4;
+    mat3: typeof mat3;
+    imat3: typeof imat3;
+    umat3: typeof umat3;
+    bmat3: typeof bmat3;
+    mat4: typeof mat4;
+    imat4: typeof imat4;
+    umat4: typeof umat4;
+    bmat4: typeof bmat4;
+    string: typeof string;
+    arrayBuffer: typeof arrayBuffer;
+
+    element: typeof element;
+    convert: typeof convert;
+
+    // TODO: temp
+    addAssign: (
+        nodeA: NodeRepresentation,
+        nodeB: NodeRepresentation,
+        ...others: NodeRepresentation[]
+    ) => ShaderNodeObject<Node>;
+}
 
 export function addNodeElement(name: string, nodeElement: unknown): void;
 
@@ -162,6 +202,14 @@ export function nodeImmutable<T>(
     ...params: ProxiedTuple<GetConstructors<T>>
 ): ShaderNodeObject<ConstructedNode<T>>;
 
+export function tslFn<T, R extends Node = ShaderNodeObject<Node>>(
+    jsFunc: (args: T) => R
+): T extends AnyObject
+    ? (args: T) => R
+    : () => R;
+
+export function append(node: Node): Node;
+
 export const color: ConvertType;
 
 export const float: ConvertType;
@@ -194,5 +242,8 @@ export const imat4: ConvertType;
 export const umat4: ConvertType;
 export const bmat4: ConvertType;
 
+export const string: (value?: string) => ShaderNodeObject<ConstNode<string>>;
+export const arrayBuffer: (value: ArrayBuffer) => ShaderNodeObject<ConstNode<ArrayBuffer>>;
+
 export const element: (node: NodeRepresentation, indexNode: NodeRepresentation) => ShaderNodeObject<Node>;
 export const convert: (node: NodeRepresentation, types: NodeTypeOption) => ShaderNodeObject<Node>;
