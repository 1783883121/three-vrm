{
  "plugins": [
    "@typescript-eslint"
  ],
  "parser": "@typescript-eslint/parser",
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:prettier/recommended",
    "prettier/@typescript-eslint"
  ],
  "env": {
    "browser": true
  },
  "rules": {
    "curly": ["error", "multi-line"], // if statements without curly are evil
    "no-console": ["error", { "allow": ["info", "warn", "error"] }], // do not leave console.log
    "require-atomic-updates": ["off"], // the rule is kinda buggy
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "default",
        "format": ["camelCase"]
      },
      {
        "selector": "variable",
        "format": ["camelCase", "UPPER_CASE"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "typeLike",
        "format": ["PascalCase"]
      },
      {
        "selector": "memberLike",
        "modifiers": ["public"],
        "format": ["camelCase"],
        "leadingUnderscore": "forbid"
      },
      {
        "selector": "memberLike",
        "modifiers": ["protected"],
        "format": ["camelCase"],
        "leadingUnderscore": "require"
      },
      {
        "selector": "memberLike",
        "modifiers": ["private"],
        "format": ["camelCase"],
        "leadingUnderscore": "require"
      }
    ],
    "@typescript-eslint/no-unused-vars": ["warn", { "args": "none" }], // we sometimes have to define unused arguments
    "@typescript-eslint/no-explicit-any": ["off"], // Three.js sometimes forces us to deal with anys
    "@typescript-eslint/no-non-null-assertion": ["off"] // Three.js sometimes forces us to deal with bangs
  }
}
